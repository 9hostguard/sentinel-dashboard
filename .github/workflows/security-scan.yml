name: Multi-Layered Security Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  FAIL_ON_CRITICAL: true

jobs:
  # Job 1: Secret Scanning and Encryption Checks
  secret-scanning:
    name: Secret & Encryption Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            gitleaks-report.json
            trufflehog-results.json
          retention-days: 30

  # Job 2: CodeQL Static Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'java', 'go', 'csharp', 'cpp' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Job 3: Trivy Vulnerability Scanning
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner for containers
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '1'
          severity: 'CRITICAL'

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: |
            trivy-results.sarif
            trivy-results.json
          retention-days: 30

  # Job 4: Semgrep Static Analysis
  semgrep-scan:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/dockerfile
            p/kubernetes
            p/terraform
            p/ci
          generateSarif: "1"

      - name: Upload Semgrep results to GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep.sarif
          retention-days: 30

  # Job 5: Dependency Vulnerability Audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        if: hashFiles('**/package.json') != ''

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        if: hashFiles('**/requirements.txt') != '' || hashFiles('**/Pipfile') != '' || hashFiles('**/pyproject.toml') != ''

      - name: Install Python security tools
        run: |
          pip install safety bandit
        if: hashFiles('**/requirements.txt') != '' || hashFiles('**/Pipfile') != '' || hashFiles('**/pyproject.toml') != ''

      - name: NPM Audit
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level critical --json > npm-audit.json || true
            npm audit --audit-level critical
          fi
        continue-on-error: true

      - name: Python Safety Check
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json > safety-report.json || true
            safety check -r requirements.txt
          fi
        continue-on-error: true

      - name: Python Bandit Security Linter
        run: |
          if find . -name "*.py" -type f | head -1 | grep -q .; then
            bandit -r . -f json -o bandit-report.json || true
            bandit -r . -ll
          fi
        continue-on-error: true

      - name: Upload dependency audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: |
            npm-audit.json
            safety-report.json
            bandit-report.json
          retention-days: 30

  # Job 6: Advanced AI-Based and Heuristic Scanning
  advanced-scanning:
    name: Advanced & AI-Based Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python for AI analysis
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install advanced scanning tools
        run: |
          pip install detect-secrets
          pip install semgrep
          pip install bandit[toml]

      - name: Detect-secrets baseline scan
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline || true
        continue-on-error: true

      - name: Advanced pattern detection
        run: |
          # Custom heuristic patterns for advanced threat detection
          echo "Running advanced pattern detection..."
          
          # Check for suspicious patterns
          find . -type f -name "*.js" -o -name "*.py" -o -name "*.java" -o -name "*.go" | \
          xargs grep -l "eval\|exec\|system\|shell_exec\|passthru" > suspicious-patterns.txt || true
          
          # Check for hardcoded credentials patterns
          find . -type f \( -name "*.js" -o -name "*.py" -o -name "*.java" -o -name "*.go" -o -name "*.yaml" -o -name "*.yml" \) | \
          xargs grep -i "password\|secret\|token\|key" | grep -E "(=|:)" > potential-secrets.txt || true
          
          # Check for SQL injection patterns
          find . -type f -name "*.js" -o -name "*.py" -o -name "*.java" | \
          xargs grep -E "(SELECT|INSERT|UPDATE|DELETE).*\+.*" > sql-injection-patterns.txt || true

      - name: Behavioral analysis simulation
        run: |
          echo "Running behavioral analysis..."
          # Simulate AI-based behavioral analysis
          echo "Analyzing code patterns for anomalous behavior..."
          
          # Check for unusual file permissions
          find . -type f -perm /111 | grep -v ".git" > executable-files.txt || true
          
          # Check for large files that might contain secrets
          find . -type f -size +1M | grep -v ".git" > large-files.txt || true

      - name: Upload advanced scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: advanced-scan-results
          path: |
            .secrets.baseline
            suspicious-patterns.txt
            potential-secrets.txt
            sql-injection-patterns.txt
            executable-files.txt
            large-files.txt
          retention-days: 30

  # Job 7: Security Report Aggregation
  security-report:
    name: Security Report Aggregation
    runs-on: ubuntu-latest
    needs: [secret-scanning, trivy-scan, semgrep-scan, dependency-audit, advanced-scanning]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive security report
        run: |
          echo "# Security Scan Results - $(date)" > security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Summary" >> security-report.md
          echo "- Workflow Run: ${{ github.run_number }}" >> security-report.md
          echo "- Commit: ${{ github.sha }}" >> security-report.md
          echo "- Branch: ${{ github.ref_name }}" >> security-report.md
          echo "- Triggered by: ${{ github.event_name }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Artifacts Generated" >> security-report.md
          find . -name "*.json" -o -name "*.sarif" -o -name "*.txt" | while read file; do
            echo "- $file" >> security-report.md
          done
          
          echo "" >> security-report.md
          echo "## Critical Issues Found" >> security-report.md
          
          # Check for critical issues in various scan results
          CRITICAL_FOUND=false
          
          if [ -f trivy-scan-results/trivy-results.json ]; then
            CRITICAL_COUNT=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | length' trivy-scan-results/trivy-results.json 2>/dev/null | wc -l || echo "0")
            echo "- Trivy Critical Vulnerabilities: $CRITICAL_COUNT" >> security-report.md
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              CRITICAL_FOUND=true
            fi
          fi
          
          if [ -f dependency-audit-results/npm-audit.json ]; then
            NPM_CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' dependency-audit-results/npm-audit.json 2>/dev/null || echo "0")
            echo "- NPM Critical Vulnerabilities: $NPM_CRITICAL" >> security-report.md
            if [ "$NPM_CRITICAL" -gt 0 ]; then
              CRITICAL_FOUND=true
            fi
          fi
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "1. Review all artifacts for detailed findings" >> security-report.md
          echo "2. Address critical vulnerabilities immediately" >> security-report.md
          echo "3. Update dependencies to latest secure versions" >> security-report.md
          echo "4. Implement additional security controls as needed" >> security-report.md
          
          # Store critical status for final job
          echo $CRITICAL_FOUND > critical-found.txt

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            security-report.md
            critical-found.txt
          retention-days: 90

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL_FOUND=$(cat critical-found.txt)
          if [ "$CRITICAL_FOUND" = "true" ] && [ "${{ env.FAIL_ON_CRITICAL }}" = "true" ]; then
            echo "❌ Critical vulnerabilities found! Failing the build."
            echo "Check the security report and individual scan artifacts for details."
            exit 1
          else
            echo "✅ No critical vulnerabilities found or build failure disabled."
          fi